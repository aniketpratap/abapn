*----------------------------------------------------------------------*
*
REPORT  ZRAVIFLEX_ENGINE.
*
TABLES: ZLCPLTH,
        ZLCPLTR,
        ZLCPLTT,
        ZLCSPCORG.
*
DATA: GT_ZLCPLTT        TYPE STANDARD TABLE OF ZLCPLTT,
      GS_ZLCPLTT        TYPE ZLCPLTT,
      GT_ZLCPLTR        TYPE STANDARD TABLE OF ZLCPLTR,
      GS_ZLCPLTR        TYPE ZLCPLTR,
      GT_ZLCPLTN        TYPE STANDARD TABLE OF ZLCPLTN,
      GS_ZLCPLTN        TYPE ZLCPLTN,
      GT_ZLCSPCPLANT    TYPE STANDARD TABLE OF ZLCSPCPLANT,
      GV_FLEXRUNNING    TYPE XFELD,
      GT_LOCKTAB        LIKE SEQTA OCCURS 0 WITH HEADER LINE,
      GV_TASK           TYPE SYTABIX,
      GT_TASKS          TYPE SHP_VL10_TASKS_T,
      GV_CALLCOMPLETE   TYPE XFELD,
      GT_RZLLITAB       TYPE STANDARD TABLE OF RZLLITAB,
      GS_RZLLITAB       TYPE RZLLITAB.
*DATA: GV_RUNNUMBER      TYPE ZLCPLTN-RUNNUMBER VALUE '00000'.
*
FIELD-SYMBOLS: <GF_ZLCPLTT> TYPE ZLCPLTT,
               <RZLLITAB>   TYPE RZLLITAB.

*
RANGES: GR_TRIGGERSTS FOR ZLCPLTT-TRIGGERSTS,
        GR_LC         FOR ZLCSPCORG-LC.
*----------------------------------------------------------------------*
SELECT-OPTIONS: S_TRANS FOR  ZLCPLTH-TRANSNBR,
                S_RUNNO FOR  ZLCPLTR-RUNNUMBER,
                S_LC    FOR  ZLCSPCORG-LC NO-DISPLAY.
PARAMETERS:     P_LC    LIKE ZLCSPCORG-LC,
                P_NORT  AS CHECKBOX,
                P_PROCES(1) TYPE N DEFAULT 5.

*----------------------------------------------------------------------*
INITIALIZATION.
  GR_TRIGGERSTS-SIGN = 'I'.
  GR_TRIGGERSTS-OPTION = 'EQ'.
  GR_TRIGGERSTS-LOW = 'U'.
  APPEND GR_TRIGGERSTS.
  GR_TRIGGERSTS-LOW = 'R'.
  APPEND GR_TRIGGERSTS.
* Start of change by NANDYD on 06-Feb-2014 for Zoetis
*  GR_TRIGGERSTS-LOW = 'S'.
*  APPEND GR_TRIGGERSTS.
* End of change by NANDYD on 06-Feb-2014 for Zoetis
*----------------------------------------------------------------------*
AT SELECTION-SCREEN.
  IF P_LC IS INITIAL AND P_NORT IS INITIAL.
    MESSAGE E208(00) WITH 'Selection not allowed'.
  ENDIF.

START-OF-SELECTION.
*
  DATA: LV_BATCH TYPE C,
        LV_FOUND TYPE C.
*
  IF SY-BATCH = 'X'.
    PERFORM FLEX_RUNCHECK_BATCH.
  ELSE.
    PERFORM FLEX_RUNCHECK_ONLINE.
  ENDIF.
* If another instance is running. Exit
  IF GV_FLEXRUNNING = 'X'.
    EXIT.
  ENDIF.
*
  DO.
    IF P_NORT IS INITIAL.
      SELECT ZLCPLTT~TRANSNBR
             ZLCPLTT~RUNNUMBER
             ZLCPLTT~ROUTESEQ
             ZLCPLTT~TRIGGERCTR
             INTO CORRESPONDING FIELDS OF TABLE GT_ZLCPLTT
             FROM ZLCPLTT INNER JOIN ZLCPLTH
                  ON ZLCPLTT~TRANSNBR = ZLCPLTH~TRANSNBR
             WHERE ZLCPLTT~TRANSNBR   IN S_TRANS
               AND ZLCPLTT~RUNNUMBER  IN S_RUNNO
               AND ZLCPLTT~TRIGGERSTS IN GR_TRIGGERSTS
               AND ZLCPLTH~STOPREASON = ' '
               AND ZLCPLTH~ROUTENBR > ' '.
    ELSE.
      SELECT ZLCPLTT~TRANSNBR
             ZLCPLTT~RUNNUMBER
             ZLCPLTT~ROUTESEQ
             ZLCPLTT~TRIGGERCTR
             INTO CORRESPONDING FIELDS OF TABLE GT_ZLCPLTT
             FROM ZLCPLTT INNER JOIN ZLCPLTH
                  ON ZLCPLTT~TRANSNBR = ZLCPLTH~TRANSNBR
             WHERE ZLCPLTT~TRANSNBR   IN S_TRANS
               AND ZLCPLTT~RUNNUMBER  IN S_RUNNO
               AND ZLCPLTT~TRIGGERSTS IN GR_TRIGGERSTS
               AND ZLCPLTH~STOPREASON = ' '
               AND ZLCPLTH~ROUTENBR = ' '.
    ENDIF.
*
    IF SY-SUBRC <> 0.
      MESSAGE S104(ZLC).
      EXIT.
    ENDIF.
*
*See if the Run has Stop Automation
    SELECT TRANSNBR
           RUNNUMBER
           STOPREASON
           INTO CORRESPONDING FIELDS OF TABLE GT_ZLCPLTR
           FROM ZLCPLTR
           FOR ALL ENTRIES IN GT_ZLCPLTT
           WHERE TRANSNBR   = GT_ZLCPLTT-TRANSNBR
             AND RUNNUMBER  = GT_ZLCPLTT-RUNNUMBER.
*
    SORT GT_ZLCPLTR BY TRANSNBR
                       RUNNUMBER.
*
    LOOP AT GT_ZLCPLTT ASSIGNING <GF_ZLCPLTT>.
*
      READ TABLE GT_ZLCPLTR INTO GS_ZLCPLTR
                            WITH KEY TRANSNBR  = <GF_ZLCPLTT>-TRANSNBR
                                     RUNNUMBER = <GF_ZLCPLTT>-RUNNUMBER
                            BINARY SEARCH.
      IF SY-SUBRC = 0 AND GS_ZLCPLTR-STOPREASON IS NOT INITIAL.
        CLEAR: <GF_ZLCPLTT>-TRANSNBR.
      ENDIF.
* Check to see if a trigger exist in error. then don't process
      SELECT COUNT(*)
             INTO SY-INDEX
             FROM ZLCPLTT
             WHERE TRANSNBR   = <GF_ZLCPLTT>-TRANSNBR
               AND TRIGGERSTS = 'E'
               AND ( RUNNUMBER  = <GF_ZLCPLTT>-RUNNUMBER
                OR RUNNUMBER  = '000000' ).
      IF SY-SUBRC = 0.
        CLEAR: <GF_ZLCPLTT>-TRANSNBR.
      ENDIF.
    ENDLOOP.
*
    DELETE GT_ZLCPLTT WHERE TRANSNBR IS INITIAL.
*
    IF GT_ZLCPLTT IS INITIAL.
      MESSAGE S104(ZLC).
      EXIT.
    ENDIF.
    SORT GT_ZLCPLTT BY TRANSNBR
                       RUNNUMBER
                       ROUTESEQ
                       TRIGGERCTR.
* Don't want to process additional triggers for the same runnumber
* without completing the previous trigger
    DELETE ADJACENT DUPLICATES FROM GT_ZLCPLTT
           COMPARING TRANSNBR.
*---------------------------------------------------------------------*
    IF P_LC IS NOT INITIAL.
* Get LC Vs Plant relationship.
      SELECT *
             INTO CORRESPONDING FIELDS OF TABLE GT_ZLCSPCPLANT
             FROM ZLCSPCPLANT
             WHERE LC = P_LC.
      SORT GT_ZLCSPCPLANT BY LC
                             SPC
                             WERKS
                             LGORT
                             NODETYPE.
* Get The nodes for the transaction
      SELECT *
             INTO CORRESPONDING FIELDS OF TABLE GT_ZLCPLTN
             FROM ZLCPLTN
             FOR ALL ENTRIES IN GT_ZLCPLTT
             WHERE TRANSNBR = GT_ZLCPLTT-TRANSNBR.
      SORT GT_ZLCPLTN BY TRANSNBR
                         RUNNUMBER
                         ROUTESEQ.

*---------------------------------------------------------------------*
      LOOP AT GT_ZLCPLTT ASSIGNING <GF_ZLCPLTT>.
*
        READ TABLE GT_ZLCPLTN INTO GS_ZLCPLTN
             WITH KEY TRANSNBR  = <GF_ZLCPLTT>-TRANSNBR
                      RUNNUMBER = <GF_ZLCPLTT>-RUNNUMBER
                      ROUTESEQ  = <GF_ZLCPLTT>-ROUTESEQ
             BINARY SEARCH.
        IF SY-SUBRC <> 0.
          READ TABLE GT_ZLCPLTN INTO GS_ZLCPLTN
               WITH KEY TRANSNBR  = <GF_ZLCPLTT>-TRANSNBR
                        RUNNUMBER = '000000'
                        ROUTESEQ  = <GF_ZLCPLTT>-ROUTESEQ
               BINARY SEARCH.
        ENDIF.
*
        PERFORM GET_LC USING <GF_ZLCPLTT>-TRANSNBR.
*
        CLEAR: LV_FOUND.
        LOOP AT GR_LC.
          READ TABLE GT_ZLCSPCPLANT
               WITH KEY LC     = GR_LC-LOW
                        SPC    = GS_ZLCPLTN-SPCOMPNY
                        WERKS  = GS_ZLCPLTN-SPCPLANT
                        LGORT  = GS_ZLCPLTN-LGORT
                        NODETYPE = GS_ZLCPLTN-NODETYPE  " MOD-000-<Release 01>-DE1K901172-SARKAA19-13-MAR-2014
               BINARY SEARCH
               TRANSPORTING NO FIELDS.
          IF SY-SUBRC = 0.
            LV_FOUND = 'X'.
            EXIT.
          ENDIF.
        ENDLOOP.
        IF LV_FOUND IS INITIAL.
          CLEAR: <GF_ZLCPLTT>-TRANSNBR.
        ENDIF.
      ENDLOOP.
*
      DELETE GT_ZLCPLTT WHERE TRANSNBR IS INITIAL.
*
      IF GT_ZLCPLTT IS INITIAL.
        MESSAGE S104(ZLC).
        EXIT.
      ENDIF.
    ENDIF.
*---------------------------------------------------------------------*
    IF P_PROCES IS INITIAL.
      LOOP AT GT_ZLCPLTT INTO GS_ZLCPLTT.
        CALL FUNCTION 'ZLC_FLEX_ENGINE'
          EXPORTING
            I_ZLCPLTT = GS_ZLCPLTT.
      ENDLOOP.
    ELSE.
      PERFORM PARALLEL_PROCESS.
    ENDIF.
  ENDDO.
*----------------------------------------------------------------------*
FORM FLEX_RUNCHECK_ONLINE .
*
* Make sure another instance of Flex Engine is not running.
  REFRESH: GT_LOCKTAB.
  GT_LOCKTAB-GNAME = 'ZLCFLEX_ENGINE'.
  GT_LOCKTAB-GMODE = 'E'.
  GT_LOCKTAB-GARG = 'ZLCFLEX_ENGINE'.
  APPEND GT_LOCKTAB.
*
  GV_FLEXRUNNING = 'X'.
  DO 5 TIMES.
    CALL FUNCTION 'ENQUEUE_ARRAY'
      TABLES
        ENQ_ARRAY = GT_LOCKTAB
      EXCEPTIONS
        OTHERS    = 1.
    IF SY-SUBRC <> 0.
      WAIT UP TO 1 SECONDS.
      GV_FLEXRUNNING = 'X'.
    ELSE.
      CLEAR: GV_FLEXRUNNING.
      EXIT.
    ENDIF.
  ENDDO.
*
  IF GV_FLEXRUNNING = 'X'.
    MESSAGE S103(ZLC) WITH SY-MSGV1.
  ENDIF.
*
ENDFORM.                    " FLEX_RUNCHECK_ONLINE
*----------------------------------------------------------------------*
FORM FLEX_RUNCHECK_BATCH .
*
  DATA: LV_JOBNAME  TYPE TBTCM-JOBNAME,
        LV_JOBCOUNT TYPE TBTCM-JOBCOUNT,
        LT_TBTCO    LIKE TBTCO OCCURS 0  WITH HEADER LINE.
*
  GV_FLEXRUNNING = 'X'.
*
  CALL FUNCTION 'GET_JOB_RUNTIME_INFO'
    IMPORTING
      JOBCOUNT        = LV_JOBCOUNT
      JOBNAME         = LV_JOBNAME
    EXCEPTIONS
      NO_RUNTIME_INFO = 1
      OTHERS          = 2.
*
  IF SY-SUBRC = 0.
    SELECT JOBNAME
           JOBCOUNT
           STATUS
           INTO CORRESPONDING FIELDS OF TABLE LT_TBTCO
           FROM TBTCO
           WHERE JOBNAME = LV_JOBNAME
             AND STATUS  = 'R'.
*
    DELETE LT_TBTCO WHERE JOBCOUNT = LV_JOBCOUNT.
    DESCRIBE TABLE LT_TBTCO LINES SY-TABIX.
    IF SY-TABIX = 0.
      CLEAR: GV_FLEXRUNNING.
    ENDIF.
  ELSE.
    CLEAR: GV_FLEXRUNNING.
  ENDIF.
*
  IF GV_FLEXRUNNING = 'X'.
    MESSAGE S103(ZLC).
  ENDIF.
*
ENDFORM.                    " FLEX_RUNCHECK_BATCH

*----------------------------------------------------------------------*
FORM GET_LC  USING    P_TRANSNBR.
*
  DATA: LS_ZLCPLTH TYPE ZLCPLTH.
*
  REFRESH: GR_LC.
  CLEAR: GR_LC.
  GR_LC-SIGN = 'I'.
  GR_LC-OPTION = 'EQ'.
  SELECT SINGLE *
         INTO CORRESPONDING FIELDS OF LS_ZLCPLTH
         FROM ZLCPLTH
         WHERE TRANSNBR = P_TRANSNBR.
*
  IF LS_ZLCPLTH-LCELC = 'X'.
    GR_LC-LOW = 'BEP'. " ELC has been replaced by BEP in Zoetis. Changed by Abhishek on 28.01.14
    APPEND GR_LC.
  ENDIF.
  IF LS_ZLCPLTH-LCALC = 'X'.
    GR_LC-LOW = 'SGP'.   " ALC has been replaced by SGP in Zoetis. Changed by Abhishek on 28.01.14
    APPEND GR_LC.
  ENDIF.
  IF LS_ZLCPLTH-LCLALC = 'X'.
    GR_LC-LOW = 'LALC'.
    APPEND GR_LC.
  ENDIF.
  IF LS_ZLCPLTH-LCGESA = 'X'.
    GR_LC-LOW = 'GESA'.
    APPEND GR_LC.
  ENDIF.
  IF LS_ZLCPLTH-LCGESE = 'X'.
    GR_LC-LOW = 'GESE'.
    APPEND GR_LC.
  ENDIF.
  IF LS_ZLCPLTH-LCGESAM = 'X'.
    GR_LC-LOW = 'GESU'.
    APPEND GR_LC.
  ENDIF.
  IF LS_ZLCPLTH-LCUSX = 'X'.
    GR_LC-LOW = 'USX'.
    APPEND GR_LC.
  ENDIF.
*
ENDFORM.                    " GET_LC
*----------------------------------------------------------------------*
FORM PARALLEL_PROCESS .
*
  DATA: LV_TABIX              TYPE SY-TABIX,
        LV_RECORDS            TYPE SY-TABIX,
        LV_TASKNAME           TYPE SHP_VL10_TASK_NAME,
        LV_GROUP              TYPE RZLLITAB-CLASSNAME,
        LV_TASKSLEFT          TYPE SY-SUBRC,
        LT_ZLCPLTT            TYPE STANDARD TABLE OF ZLCPLTT,
        LS_ZLCPLTT            TYPE ZLCPLTT.
*
  DESCRIBE TABLE GT_ZLCPLTT LINES LV_TABIX.
  LV_RECORDS = LV_TABIX / P_PROCES.
  IF LV_RECORDS IS INITIAL.
    LV_RECORDS = 1.
  ENDIF.
*
  CLEAR: GV_CALLCOMPLETE.
  REFRESH: GT_TASKS.
  CLEAR: LV_TABIX.
  LOOP AT GT_ZLCPLTT INTO LS_ZLCPLTT.
    APPEND LS_ZLCPLTT TO LT_ZLCPLTT.
    ADD 1 TO LV_TABIX.
    IF LV_TABIX = LV_RECORDS.
      PERFORM TASK_CONTROLLER USING   'ADD'
                              CHANGING LV_TASKNAME
                                       LV_TASKSLEFT.
*
      PERFORM GET_AVAILABLE_PROCESSES CHANGING LV_GROUP.
*
      IF LV_GROUP IS NOT INITIAL.
        CALL FUNCTION 'ZLCFLEX_ENGINE_PARALLEL'
          STARTING NEW TASK LV_TASKNAME
          DESTINATION IN GROUP LV_GROUP
          PERFORMING GET_FLEX_CALL_FEEDBACK ON END OF TASK
          TABLES
            T_ZLCPLTT = LT_ZLCPLTT.
        REFRESH: LT_ZLCPLTT.
        CLEAR: LV_TABIX.
      ELSE.
        CALL FUNCTION 'ZLCFLEX_ENGINE_PARALLEL'
          STARTING NEW TASK LV_TASKNAME
          PERFORMING GET_FLEX_CALL_FEEDBACK ON END OF TASK
          TABLES
            T_ZLCPLTT = LT_ZLCPLTT.
        IF SY-SUBRC <> 0.
          PERFORM TASK_CONTROLLER USING   'DEL'
                                  CHANGING LV_TASKNAME
                                           LV_TASKSLEFT.
        ENDIF.
        REFRESH: LT_ZLCPLTT.
        CLEAR: LV_TABIX.
      ENDIF.
    ENDIF.
  ENDLOOP.
*
  IF LT_ZLCPLTT IS NOT INITIAL.
    PERFORM TASK_CONTROLLER USING   'ADD'
                            CHANGING LV_TASKNAME
                                     LV_TASKSLEFT.
*
    PERFORM GET_AVAILABLE_PROCESSES CHANGING LV_GROUP.
*
    IF LV_GROUP IS NOT INITIAL.
      CALL FUNCTION 'ZLCFLEX_ENGINE_PARALLEL'
        STARTING NEW TASK LV_TASKNAME
        DESTINATION IN GROUP LV_GROUP
        PERFORMING GET_FLEX_CALL_FEEDBACK ON END OF TASK
        TABLES
          T_ZLCPLTT = LT_ZLCPLTT.
    ELSE.
      CALL FUNCTION 'ZLCFLEX_ENGINE_PARALLEL'
        STARTING NEW TASK LV_TASKNAME
        PERFORMING GET_FLEX_CALL_FEEDBACK ON END OF TASK
        TABLES
          T_ZLCPLTT = LT_ZLCPLTT.
      IF SY-SUBRC <> 0.
        PERFORM TASK_CONTROLLER USING   'DEL'
                                CHANGING LV_TASKNAME
                                         LV_TASKSLEFT.
      ENDIF.
    ENDIF.
  ENDIF.
*
  DESCRIBE TABLE GT_TASKS LINES SY-INDEX.
  IF SY-INDEX = 0.
     GV_CALLCOMPLETE = 'X'.
  ENDIF.
  WAIT UNTIL GV_CALLCOMPLETE = 'X'.
*
ENDFORM.                    " PARALLEL_PROCESS
*----------------------------------------------------------------------*
FORM TASK_CONTROLLER USING    P_ACTION
                     CHANGING P_TASKNAME TYPE SHP_VL10_TASK_NAME
                              P_TASKSLEFT TYPE SY-SUBRC.
*
  DATA:    LS_TASKS       TYPE SHP_VL10_TASKS.
*
  CASE P_ACTION.
    WHEN 'INI'.
      REFRESH: GT_TASKS.
    WHEN 'ADD'.
      GV_TASK       = GV_TASK + 1.            "Add integer...
      LS_TASKS-NAME = GV_TASK.                "...convert to char and
      P_TASKNAME    = LS_TASKS-NAME.          "...return
      APPEND LS_TASKS TO GT_TASKS.
    WHEN 'DEL'.
      DELETE GT_TASKS WHERE NAME = P_TASKNAME.
    WHEN 'CHK'.
  ENDCASE.
  DESCRIBE TABLE GT_TASKS LINES P_TASKSLEFT.
*
ENDFORM.                    " TASK_CONTROLLER
*----------------------------------------------------------------------*
FORM GET_FLEX_CALL_FEEDBACK    USING TASKNAME.
*
  DATA: LV_TASKNAME           TYPE SHP_VL10_TASK_NAME,
        LV_TASKSLEFT          TYPE SY-SUBRC,
        LT_ZEWAMSMMDTL        TYPE ZEWAMSMMDTL OCCURS 0 WITH HEADER LINE,
        LS_ZEWAMSMMDTL        TYPE ZEWAMSMMDTL,
        LT_ZEWAMSMMDTLDEL     TYPE ZEWAMSMMDTL OCCURS 0 WITH HEADER LINE.
*
  RECEIVE RESULTS FROM FUNCTION 'ZLCFLEX_ENGINE_PARALLEL'
          EXCEPTIONS
          OTHERS                = 1.
*
  LV_TASKNAME = TASKNAME.
*
  PERFORM TASK_CONTROLLER USING 'DEL'
                          CHANGING LV_TASKNAME
                                   LV_TASKSLEFT.
*
  IF LV_TASKSLEFT = 0.
    GV_CALLCOMPLETE = 'X'.
  ENDIF.
*
ENDFORM.                    " GET_FLEX_CALL_FEEDBACK
*----------------------------------------------------------------------*
FORM GET_AVAILABLE_PROCESSES  CHANGING P_GROUPNAME.
*
  DATA: LV_TOTAL TYPE I,
        LV_FREE  TYPE I.
*
  CLEAR: P_GROUPNAME.
*
  IF GT_RZLLITAB IS INITIAL.
    SELECT CLASSNAME
           INTO CORRESPONDING FIELDS OF TABLE GT_RZLLITAB
           FROM RZLLITAB
           WHERE GROUPTYPE = 'S'.
    GS_RZLLITAB-GROUPTYPE = 'F'.
  ENDIF.
*
  READ TABLE GT_RZLLITAB WITH KEY GROUPTYPE = 'F'
       TRANSPORTING NO FIELDS.
  IF SY-SUBRC <> 0.
    MODIFY TABLE GT_RZLLITAB FROM GS_RZLLITAB
           TRANSPORTING GROUPTYPE.
  ENDIF.
*
  LOOP AT GT_RZLLITAB ASSIGNING <RZLLITAB> WHERE GROUPTYPE IS INITIAL.
    CALL FUNCTION 'SPBT_INITIALIZE'
      EXPORTING
        GROUP_NAME                     = <RZLLITAB>-CLASSNAME
      IMPORTING
        MAX_PBT_WPS                    = LV_TOTAL
        FREE_PBT_WPS                   = LV_FREE
      EXCEPTIONS
        INVALID_GROUP_NAME             = 1
        INTERNAL_ERROR                 = 2
        PBT_ENV_ALREADY_INITIALIZED    = 3
        CURRENTLY_NO_RESOURCES_AVAIL   = 4
        NO_PBT_RESOURCES_FOUND         = 5
        CANT_INIT_DIFFERENT_PBT_GROUPS = 6
        OTHERS                         = 7.
*
    IF SY-SUBRC = 0.
      IF LV_FREE > 5.
        P_GROUPNAME = <RZLLITAB>-CLASSNAME.
        CLEAR: <RZLLITAB>-GROUPTYPE.
        EXIT.
      ENDIF.
    ENDIF.
  ENDLOOP.
*
ENDFORM.                    " GET_AVAILABLE_PROCESSES
